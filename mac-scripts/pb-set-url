#!/usr/bin/env python3
# This uses the Python appscript and AppKit packages.

__version__ = '0.0.1'

# Note: this code uses lazy loading.  Additional imports are made below.
import sys
if sys.version_info <= (3, 6):
    print('This program requires Python version 3.6 or higher,')
    print('but the current version of Python is ' +
          str(sys.version_info.major) + '.' + str(sys.version_info.minor) + '.')
    exit(1)


# Main body.
# .............................................................................

def main():
    '''
This program writes a URL with a name to the macOS pasteboard/clipboard.
The result will show as a linked name in applications such as OmniOutliner
that can recognize the format. For example:

        pb-set-url Google https://google.com

Make sure to quote the URL with single quotes if it contains any special
characters such as question marks.

By default, if a problem arises, this will display a GUI error dialog. To
avoid the use of a GUI and print a message to the terminal instead, use
the optional flag -G.  Example:

        pb-set-url -G name url

The optional flag -V will print the current version and exit.
'''
    from os.path import basename
    prog_name = basename(sys.argv[0])
    help_text = 'Usage: ' + prog_name + ' [options] name url\n' + main.__doc__

    # Process arguments & handle early exits ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    (help, no_gui, show_version, args) = parsed_arguments([
        ('-h', '--help', 'Print program help text and exit'),
        ('-G', '--no-gui', 'Do not use macOS GUI dialogs'),
        ('-V', '--version', 'Print the program version info and exit'),
    ])

    if help or (len(sys.argv[1:]) == 1 and sys.argv[1].lower() == 'help'):
        print(help_text)
        sys.exit(0)

    if show_version:
        print_version()
        sys.exit(0)

    if not args or len(args) < 2:
        fatal('Must be given two arguments: a name, and a URL.', not no_gui)
    name = args[0]
    url = args[1]

    # Do the real work --------------------------------------------------------

    try:
        # AppKit comes from PyObjC.
        from AppKit import NSPasteboard
        pb = NSPasteboard.generalPasteboard()
        pb.clearContents()

        # OmniOutliner, Emacs get the following.
        pb.setData_forType_(nsdata(url), 'public.url')

        # OmniOutliner will detect the following
        # This has to come *after* setting the url. Don't ask me why.
        pb.setData_forType_(nsdata(name), 'public.url-name')

        # DEVONthink detects the following
        pb.setData_forType_(nsdata(url), 'public.utf8-plain-text')

        # Other types I've seen.
        pb.setData_forType_(nsdata(url, encoding = 'utf-16'), 'public.utf16-plain-text')
    except Exception as ex:
        fatal(str(ex))


# Miscellaneous helpers.
# .............................................................................

def nsdata(obj, encoding = 'utf-8'):
    '''Convert 'object' to 'NSData'.'''
    from Foundation import NSData
    s = obj.encode(encoding)
    return NSData.dataWithBytes_length_(s, len(s))


def parsed_arguments(options):
    # Construct True/False list based on whether corresponding option is given.
    values = []
    for index, option in enumerate(options):
        # True if the arg is in argv, in the order the arg appears in options.
        flag_present = any(arg in [option[0], option[1]] for arg in sys.argv[1:])
        values.append(flag_present)

    # Values unrecognized as options are assumed to be the arguments.
    flags = [opt[0] for opt in options] + [opt[1] for opt in options]
    args = [arg for arg in sys.argv[1:] if not arg in flags]
    return values + ([args] if args else [None])


def inform(msg, gui = True):
    '''Print an error message or show an error dialog.'''
    if gui:
        from osax import OSAX
        sa = None
        # There seems to have been a change in the OSAX class initializer, but
        # I don't know when/what version introduced it.
        try:
            sa = OSAX(name = "System Events")
        except TypeError:
            sa = OSAX("StandardAdditions", name = "System Events")
        if sa:
            sa.activate()
            # The text below uses Unicode characters to produce bold text.
            sa.display_dialog('𝐩𝐛-𝘀𝗲𝐭-𝐮𝐫𝐥 𝗲𝗿𝗿𝗼𝗿:\n\n' + msg, buttons = ["OK"],
                              default_button = 'OK', with_icon = 0)
            return
    # If not gui, or as a fallback if we can't get OSAX to work.
    print('‼️  ' + msg)


def fatal(msg, no_gui = False):
    inform(msg, no_gui)
    sys.exit(1)


def print_version():
    print(__version__)


# Main entry point.
# .............................................................................

if __name__ == '__main__':
    main()
